tools: load-data, read-query, write-query
export: export-result
description: build a duckdb query against structured data. Also support exporting data from the duckdb database into a structured file format such as csv, json, or xlsx. This tool cannot be ran in parallel with itself
args: file: (Optional) The complete path to the structured file to query
args: prompt: The natural language prompt that will be transformed into a duckdb query. This prompt should not be written in sql.
context: github.com/gptscript-ai/structured-data-querier/tool-context.txt

If it has not already been done, load the provided file into a duckdb database. If no file is provided, assume the user is trying to query a duckdb database you have already created.

---
name: load-data
args: file: The complete path to the structured file to query
context: context with $file

---
name: read-query
description: Executes a read-only query against a duckdb database
args: query: The duckdb query to be executed
args: dbFile: The complete path to the duckdb database file
args: readonly: Should always be 'true'

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/query.py

---
name: write-query
description: Executes a query that writes to a duckdb database. This tool should be used whenever the database is going to be changed.
args: query: The duckdb query to be executed
args: dbFile: The complete absolute path to the duckdb database file

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/query.py

---
name: context
description: read the schema of a structured file and load it into a duckdb database
tools: create-database-file, read-schema
args: filePath: the path to the structured file

Do these steps one at a time, do not move on until the previous step is complete. Do not exit until all steps are finished.

Create a database file for the structured file based of the name of the file being read. Replace any spaces or special characters in the name with an underscore. The database filename should only contain letters, numbers, and underscores.

Next, load the schema of the structured file into the database using the absolute path to the structured file. The table should be named the same thing as the database file.
Table names can only contain letters, numbers, and underscores.

Return the complete path to the database file and the schema created.

---
name: read-schema
description: read the schema of a structured file (json, csv, or xlsx) and load it into a duckdb database
args: filePath: the path to the structured file
args: dbFile: The complete path to the duckdb database file

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/read_schema.py

---
name: create-database-file
description: creates a new duckdb database file if one does not exist
args: dbFile: The name of the duckdb database file to create

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/create_database_file.py

---
name: export-result
tools: read-query, pwd
context: github.com/gptscript-ai/structured-data-querier/export-context.txt
description: creates duckdb queries that writes the contents of a database to a structured file
args: prompt: The natural language prompt that will be transformed into a duckdb query to write a file. This prompt should not be written in sql.
args: dbFile: The complete absolute path to the existing duckdb database file
args: filePath: The path to the structured file to write the results to

Write a duckdb query based on the prompt provided that will dump the contents of the database to a structured file in the specified format. The files it writes should always be written to the user's current working directory.

---
name: pwd
description: returns the absolute path for the user's current working directory

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/pwd.py